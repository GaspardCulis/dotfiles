# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  pkgs,
  lib,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
    ./disko-config.nix
  ];

  boot = {
    kernelPackages = lib.mkDefault pkgs.linuxPackages_zen;
    kernelModules = ["amdgpu"];
    kernelParams = [
      "mem_sleep_default=deep" # Should fix/change suspend method
    ];
    extraModulePackages = with pkgs; [mesa];
    initrd = {
      availableKernelModules = ["nvme" "xhci_pci" "usbhid" "sdhci_pci"];
      kernelModules = [];
    };
    loader = {
      timeout = 2;
      efi.canTouchEfiVariables = true;
      grub = {
        enable = true;
        device = "nodev";
        efiSupport = true;
      };
    };
    tmp.useTmpfs = true;
    binfmt.emulatedSystems = ["aarch64-linux"];
  };

  # Network & Bluetooth
  networking.networkmanager.enable = true;
  networking.firewall.checkReversePath = "loose"; # For wireguard

  hardware.bluetooth.enable = true;
  hardware.bluetooth.powerOnBoot = true;

  # Audio
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # Fix pipewire battery drain (https://shorturl.at/G9iDS)
    wireplumber.extraConfig = {
      wireplumber.profiles = {
        main = {
          monitor.libcamera = "disabled";
        };
      };
    };
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;
  };

  #NVIDIA
  environment.systemPackages = with pkgs; [
    nvtopPackages.nvidia
    nvtopPackages.amd
  ];
  nixpkgs.config.allowUnfreePredicate = pkg:
    builtins.elem (lib.getName pkg) [
      "nvidia-x11"
      "nvidia-settings"
      "cuda_sanitizer_api"
      "cuda_profiler_api"
      "cuda_cuobjdump"
      "cuda_cuxxfilt"
      "cuda_nvdisasm"
      "cuda_nvml_dev"
      "cuda_nvprune"
      "cuda_cudart"
      "cuda-merged"
      "cuda_cupti"
      "cuda_nvrtc"
      "cuda_cccl"
      "cuda_nvcc"
      "cuda_nvtx"
      "cuda_gdb"
      "libnpp"
      "libcufft"
      "libcublas"
      "libcurand"
      "libcusolver"
      "libcusparse"
      "libnvjitlink"
      # Steam
      "xow_dongle-firmware"
      "steam"
      "steam-original"
      "steam-run"
      "steam-unwrapped"
      "steam-jupiter-unwrapped"
      "steamdeck-hw-theme"
      # Games
      "vintagestory"
    ];
  nixpkgs.config.permittedInsecurePackages = [
    "dotnet-runtime-7.0.20"
  ];

  nixpkgs.config.packageOverrides = pkgs: {
    intel-vaapi-driver = pkgs.intel-vaapi-driver.override {enableHybridCodec = true;};
  };
  hardware.graphics = {
    enable = true;
    extraPackages = with pkgs; [
      intel-media-driver
      intel-vaapi-driver
      vaapiVdpau
      libvdpau-va-gl
    ];
  };

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp3s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp7s0f4u2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp4s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
